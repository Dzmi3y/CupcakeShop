// <auto-generated />
using System;
using CupcakeShop.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CupcakeShop.Database.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240307231723_Cart_entity_replaced_by_OrderedProduct")]
    partial class Cart_entity_replaced_by_OrderedProduct
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CupcakeShop.Core.Entities.AdditionDecoration", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("Price")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.ToTable("AdditionDecorations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("645be3e2-40ff-4b16-9a20-df53061414b5"),
                            Name = "Without decoration",
                            Price = 0.0
                        },
                        new
                        {
                            Id = new Guid("a916556e-c8a1-4d41-843b-7e7ceac0f7cb"),
                            Name = "Decor 1",
                            Price = 1.0
                        },
                        new
                        {
                            Id = new Guid("e1f1d756-9070-452b-9f5d-f961e2811b30"),
                            Name = "Decor 2",
                            Price = 2.0
                        },
                        new
                        {
                            Id = new Guid("5f11aebf-5fc5-4662-861f-9f9378fc2d9e"),
                            Name = "Decor 3",
                            Price = 3.0
                        });
                });

            modelBuilder.Entity("CupcakeShop.Core.Entities.AdditionSubspecies", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("Price")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.ToTable("AdditionSubspecies");

                    b.HasData(
                        new
                        {
                            Id = new Guid("619efffd-f5e7-4b4d-a4d8-f7d98a972863"),
                            Name = "Default type",
                            Price = 0.0
                        },
                        new
                        {
                            Id = new Guid("7a9a2845-8b70-4b61-ab5a-8af8030df919"),
                            Name = "Type 1",
                            Price = 1.0
                        },
                        new
                        {
                            Id = new Guid("b1ee2f02-91e8-4038-adac-5becaae327fe"),
                            Name = "Type 2",
                            Price = 2.0
                        },
                        new
                        {
                            Id = new Guid("3cc70b7a-9439-4443-a5d6-fd8615dbb7ec"),
                            Name = "Type 3",
                            Price = 3.0
                        });
                });

            modelBuilder.Entity("CupcakeShop.Core.Entities.AdditionWeight", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<double>("Price")
                        .HasColumnType("double precision");

                    b.Property<string>("UnitOfMeasurement")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("Weight")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.ToTable("AdditionWeights");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c6154837-99aa-461d-8505-801f84d7c24b"),
                            Price = 0.0,
                            UnitOfMeasurement = "g",
                            Weight = 0.0
                        },
                        new
                        {
                            Id = new Guid("4c99c2d2-01bb-4a59-af73-6d074e37a4b2"),
                            Price = 1.0,
                            UnitOfMeasurement = "g",
                            Weight = 100.0
                        },
                        new
                        {
                            Id = new Guid("39e68b14-8289-4001-ac6b-676b9f27bcf1"),
                            Price = 2.0,
                            UnitOfMeasurement = "g",
                            Weight = 300.0
                        },
                        new
                        {
                            Id = new Guid("fdde0517-a673-4dbd-92c1-39b6d5e25c43"),
                            Price = 3.0,
                            UnitOfMeasurement = "g",
                            Weight = 500.0
                        },
                        new
                        {
                            Id = new Guid("66df66c7-c668-4c23-a32f-d20cbbd4e8b3"),
                            Price = 4.0,
                            UnitOfMeasurement = "kg",
                            Weight = 1.0
                        },
                        new
                        {
                            Id = new Guid("d118d291-805f-42e4-87d7-f8eb11b09776"),
                            Price = 5.0,
                            UnitOfMeasurement = "kg",
                            Weight = 1.5
                        },
                        new
                        {
                            Id = new Guid("ea16f344-21cd-4faf-b24a-49542c622776"),
                            Price = 6.0,
                            UnitOfMeasurement = "kg",
                            Weight = 2.0
                        });
                });

            modelBuilder.Entity("CupcakeShop.Core.Entities.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Apartment")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Building")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Commentary")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Date")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DeliveryMethod")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Entrance")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Floor")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("House")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("CupcakeShop.Core.Entities.OrderedProduct", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AdditionDecorationId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AdditionSubspeciesId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AdditionWeightId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AdditionDecorationId");

                    b.HasIndex("AdditionSubspeciesId");

                    b.HasIndex("AdditionWeightId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderedProducts");
                });

            modelBuilder.Entity("CupcakeShop.Core.Entities.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Delivery")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ImgUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ImgUrlsJson")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsBestseller")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("Price")
                        .HasColumnType("double precision");

                    b.Property<int>("ProductTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("ShortDetailsJson")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("StorageConditions")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UnitOfMeasurement")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("Weight")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("ProductTypeId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = new Guid("642a2282-13df-48f1-8a93-8463ab548dfe"),
                            Delivery = "Lorem, ipsum dolor sit amet consectetur adipisicing elit. Est quos quasi in dolorem reiciendis,",
                            Description = "quibusdam praesentium nemo commodi! Provident dicta pariatur",
                            ImgUrl = "/images/cake.png",
                            ImgUrlsJson = "[\"/images/cake.png\",\"/images/test1.png\", \"/images/test2.png\", \"/images/test3.png\", \"/images/test4.png\"]",
                            IsBestseller = true,
                            Name = "Chocolate cake",
                            Price = 2.0,
                            ProductTypeId = 1,
                            ShortDetailsJson = "[\"Lorem ipsum dolor sit amet\", \"consectetaur adipisicing elit\", \"sed do eiusmod tempor incididunt\", \"ut labore et dolore magna aliqua\"]",
                            StorageConditions = "unde sit modi possimus incidunt ab neque sunt fugit.",
                            UnitOfMeasurement = "kg",
                            Weight = 1.0
                        },
                        new
                        {
                            Id = new Guid("b1232a7a-8dc4-4b59-95f7-b32a27cf71e5"),
                            Delivery = "Lorem, ipsum dolor sit amet consectetur adipisicing elit. Est quos quasi in dolorem reiciendis,",
                            Description = "quibusdam praesentium nemo commodi! Provident dicta pariatur",
                            ImgUrl = "/images/cake.png",
                            ImgUrlsJson = "[\"/images/cake.png\",\"/images/test1.png\", \"/images/test2.png\", \"/images/test3.png\", \"/images/test4.png\"]",
                            IsBestseller = false,
                            Name = "Apple pie",
                            Price = 3.0,
                            ProductTypeId = 1,
                            ShortDetailsJson = "[\"Lorem ipsum dolor sit amet\", \"consectetaur adipisicing elit\", \"sed do eiusmod tempor incididunt\", \"ut labore et dolore magna aliqua\"]",
                            StorageConditions = "unde sit modi possimus incidunt ab neque sunt fugit.",
                            UnitOfMeasurement = "kg",
                            Weight = 2.0
                        },
                        new
                        {
                            Id = new Guid("e0ac2114-4bf6-42b0-95fa-0ea014fb0b30"),
                            Delivery = "Lorem, ipsum dolor sit amet consectetur adipisicing elit. Est quos quasi in dolorem reiciendis,",
                            Description = "quibusdam praesentium nemo commodi! Provident dicta pariatur",
                            ImgUrl = "/images/cookie.png",
                            ImgUrlsJson = "[\"/images/cookie.png\",\"/images/test1.png\", \"/images/test2.png\", \"/images/test3.png\", \"/images/test4.png\"]",
                            IsBestseller = true,
                            Name = "Chocolate Chip",
                            Price = 1.0,
                            ProductTypeId = 2,
                            ShortDetailsJson = "[\"Lorem ipsum dolor sit amet\", \"consectetaur adipisicing elit\", \"sed do eiusmod tempor incididunt\", \"ut labore et dolore magna aliqua\"]",
                            StorageConditions = "unde sit modi possimus incidunt ab neque sunt fugit.",
                            UnitOfMeasurement = "g",
                            Weight = 100.0
                        },
                        new
                        {
                            Id = new Guid("27600b58-07ab-437d-9398-d6bca0b2a1fd"),
                            Delivery = "Lorem, ipsum dolor sit amet consectetur adipisicing elit. Est quos quasi in dolorem reiciendis,",
                            Description = "quibusdam praesentium nemo commodi! Provident dicta pariatur",
                            ImgUrl = "/images/cookie.png",
                            ImgUrlsJson = "[\"/images/cookie.png\",\"/images/test1.png\", \"/images/test2.png\", \"/images/test3.png\", \"/images/test4.png\"]",
                            IsBestseller = false,
                            Name = "Peanut Butter",
                            Price = 5.0,
                            ProductTypeId = 2,
                            ShortDetailsJson = "[\"Lorem ipsum dolor sit amet\", \"consectetaur adipisicing elit\", \"sed do eiusmod tempor incididunt\", \"ut labore et dolore magna aliqua\"]",
                            StorageConditions = "unde sit modi possimus incidunt ab neque sunt fugit.",
                            UnitOfMeasurement = "g",
                            Weight = 500.0
                        },
                        new
                        {
                            Id = new Guid("146ee41c-478c-4581-8ee9-80cd2d25cea0"),
                            Delivery = "Lorem, ipsum dolor sit amet consectetur adipisicing elit. Est quos quasi in dolorem reiciendis,",
                            Description = "quibusdam praesentium nemo commodi! Provident dicta pariatur",
                            ImgUrl = "/images/choux.png",
                            ImgUrlsJson = "[\"/images/choux.png\",\"/images/test1.png\", \"/images/test2.png\", \"/images/test3.png\", \"/images/test4.png\"]",
                            IsBestseller = true,
                            Name = "Lemon Choux",
                            Price = 1.0,
                            ProductTypeId = 3,
                            ShortDetailsJson = "[\"Lorem ipsum dolor sit amet\", \"consectetaur adipisicing elit\", \"sed do eiusmod tempor incididunt\", \"ut labore et dolore magna aliqua\"]",
                            StorageConditions = "unde sit modi possimus incidunt ab neque sunt fugit.",
                            UnitOfMeasurement = "g",
                            Weight = 100.0
                        },
                        new
                        {
                            Id = new Guid("b38368e4-f54c-4316-9e6a-6e63ddddaaae"),
                            Delivery = "Lorem, ipsum dolor sit amet consectetur adipisicing elit. Est quos quasi in dolorem reiciendis,",
                            Description = "quibusdam praesentium nemo commodi! Provident dicta pariatur",
                            ImgUrl = "/images/choux.png",
                            ImgUrlsJson = "[\"/images/choux.png\",\"/images/test1.png\", \"/images/test2.png\", \"/images/test3.png\", \"/images/test4.png\"]",
                            IsBestseller = false,
                            Name = "Strawberry Choux",
                            Price = 4.0,
                            ProductTypeId = 3,
                            ShortDetailsJson = "[\"Lorem ipsum dolor sit amet\", \"consectetaur adipisicing elit\", \"sed do eiusmod tempor incididunt\", \"ut labore et dolore magna aliqua\"]",
                            StorageConditions = "unde sit modi possimus incidunt ab neque sunt fugit.",
                            UnitOfMeasurement = "g",
                            Weight = 400.0
                        },
                        new
                        {
                            Id = new Guid("a565b14c-029b-4581-8d93-acc0e3211487"),
                            Delivery = "Lorem, ipsum dolor sit amet consectetur adipisicing elit. Est quos quasi in dolorem reiciendis,",
                            Description = "quibusdam praesentium nemo commodi! Provident dicta pariatur",
                            ImgUrl = "/images/pizza.jpg",
                            ImgUrlsJson = "[\"/images/pizza.jpg\",\"/images/test1.png\", \"/images/test2.png\", \"/images/test3.png\", \"/images/test4.png\"]",
                            IsBestseller = true,
                            Name = "Four Cheese",
                            Price = 5.0,
                            ProductTypeId = 4,
                            ShortDetailsJson = "[\"Lorem ipsum dolor sit amet\", \"consectetaur adipisicing elit\", \"sed do eiusmod tempor incididunt\", \"ut labore et dolore magna aliqua\"]",
                            StorageConditions = "unde sit modi possimus incidunt ab neque sunt fugit.",
                            UnitOfMeasurement = "g",
                            Weight = 500.0
                        },
                        new
                        {
                            Id = new Guid("83bf731a-1237-4468-9417-32426b1ccca1"),
                            Delivery = "Lorem, ipsum dolor sit amet consectetur adipisicing elit. Est quos quasi in dolorem reiciendis,",
                            Description = "quibusdam praesentium nemo commodi! Provident dicta pariatur",
                            ImgUrl = "/images/pizza.jpg",
                            ImgUrlsJson = "[\"/images/pizza.jpg\",\"/images/test1.png\", \"/images/test2.png\", \"/images/test3.png\", \"/images/test4.png\"]",
                            IsBestseller = false,
                            Name = "Veggie",
                            Price = 3.0,
                            ProductTypeId = 4,
                            ShortDetailsJson = "[\"Lorem ipsum dolor sit amet\", \"consectetaur adipisicing elit\", \"sed do eiusmod tempor incididunt\", \"ut labore et dolore magna aliqua\"]",
                            StorageConditions = "unde sit modi possimus incidunt ab neque sunt fugit.",
                            UnitOfMeasurement = "g",
                            Weight = 300.0
                        });
                });

            modelBuilder.Entity("CupcakeShop.Core.Entities.ProductType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ProductTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "cake"
                        },
                        new
                        {
                            Id = 2,
                            Name = "cookie"
                        },
                        new
                        {
                            Id = 3,
                            Name = "choux"
                        },
                        new
                        {
                            Id = 4,
                            Name = "pizza"
                        });
                });

            modelBuilder.Entity("CupcakeShop.Core.Entities.OrderedProduct", b =>
                {
                    b.HasOne("CupcakeShop.Core.Entities.AdditionDecoration", "AdditionDecoration")
                        .WithMany()
                        .HasForeignKey("AdditionDecorationId");

                    b.HasOne("CupcakeShop.Core.Entities.AdditionSubspecies", "AdditionSubspecies")
                        .WithMany()
                        .HasForeignKey("AdditionSubspeciesId");

                    b.HasOne("CupcakeShop.Core.Entities.AdditionWeight", "AdditionWeight")
                        .WithMany()
                        .HasForeignKey("AdditionWeightId");

                    b.HasOne("CupcakeShop.Core.Entities.Order", null)
                        .WithMany("OrderedProducts")
                        .HasForeignKey("OrderId");

                    b.HasOne("CupcakeShop.Core.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId");

                    b.Navigation("AdditionDecoration");

                    b.Navigation("AdditionSubspecies");

                    b.Navigation("AdditionWeight");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("CupcakeShop.Core.Entities.Product", b =>
                {
                    b.HasOne("CupcakeShop.Core.Entities.ProductType", "ProductType")
                        .WithMany()
                        .HasForeignKey("ProductTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductType");
                });

            modelBuilder.Entity("CupcakeShop.Core.Entities.Order", b =>
                {
                    b.Navigation("OrderedProducts");
                });
#pragma warning restore 612, 618
        }
    }
}
