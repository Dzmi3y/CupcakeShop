// <auto-generated />
using System;
using CupcakeShop.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CupcakeShop.Database.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240303141122_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CartProduct", b =>
                {
                    b.Property<Guid>("CartsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProductsId")
                        .HasColumnType("uuid");

                    b.HasKey("CartsId", "ProductsId");

                    b.HasIndex("ProductsId");

                    b.ToTable("CartProduct");
                });

            modelBuilder.Entity("CupcakeShop.Core.Entities.AdditionDecoration", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("Price")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.ToTable("AdditionDecorations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b7225a3b-4fdc-4631-b269-8ff6a9305857"),
                            Name = "Without decoration",
                            Price = 0.0
                        },
                        new
                        {
                            Id = new Guid("a7756877-402d-49ad-92c5-11f007ae87a6"),
                            Name = "Decor 1",
                            Price = 1.0
                        },
                        new
                        {
                            Id = new Guid("6e14d01d-2302-497c-a5cd-8f564f8ac2dd"),
                            Name = "Decor 2",
                            Price = 2.0
                        },
                        new
                        {
                            Id = new Guid("caf80b89-b775-4fcc-a9c8-0b025a038318"),
                            Name = "Decor 3",
                            Price = 3.0
                        });
                });

            modelBuilder.Entity("CupcakeShop.Core.Entities.AdditionSubspecies", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("Price")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.ToTable("AdditionSubspecies");

                    b.HasData(
                        new
                        {
                            Id = new Guid("cc679db7-2d5b-4cf0-a5f1-c2e049a71a07"),
                            Name = "Default type",
                            Price = 0.0
                        },
                        new
                        {
                            Id = new Guid("c2904f79-f217-431e-b5eb-fe3638963b71"),
                            Name = "Type 1",
                            Price = 1.0
                        },
                        new
                        {
                            Id = new Guid("77858b5f-7530-44fc-8247-e084572989f7"),
                            Name = "Type 2",
                            Price = 2.0
                        },
                        new
                        {
                            Id = new Guid("02444e89-a0d5-4562-8b50-e73a0ba8f519"),
                            Name = "Type 3",
                            Price = 3.0
                        });
                });

            modelBuilder.Entity("CupcakeShop.Core.Entities.AdditionWeight", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<double>("Price")
                        .HasColumnType("double precision");

                    b.Property<string>("UnitOfMeasurement")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("Weight")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.ToTable("AdditionWeights");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1e8d8f9b-2ad9-4d29-aeec-86d5db6316a9"),
                            Price = 0.0,
                            UnitOfMeasurement = "g",
                            Weight = 0.0
                        },
                        new
                        {
                            Id = new Guid("219fc935-dd1c-4c67-a551-d19ba60bde71"),
                            Price = 1.0,
                            UnitOfMeasurement = "g",
                            Weight = 100.0
                        },
                        new
                        {
                            Id = new Guid("cbeed6cc-b212-4138-a8d2-c75300f782b3"),
                            Price = 2.0,
                            UnitOfMeasurement = "g",
                            Weight = 300.0
                        },
                        new
                        {
                            Id = new Guid("004fe7dc-ecac-4a3f-9074-15f6c1755604"),
                            Price = 3.0,
                            UnitOfMeasurement = "g",
                            Weight = 500.0
                        },
                        new
                        {
                            Id = new Guid("1a51258c-90fe-4ebe-bb6f-7007fafaec0f"),
                            Price = 4.0,
                            UnitOfMeasurement = "kg",
                            Weight = 1.0
                        },
                        new
                        {
                            Id = new Guid("baaf0b6c-8b9e-4045-8caf-2b5f633d2b41"),
                            Price = 5.0,
                            UnitOfMeasurement = "kg",
                            Weight = 1.5
                        },
                        new
                        {
                            Id = new Guid("c23f492b-dc46-4a3b-9491-386524ae0209"),
                            Price = 6.0,
                            UnitOfMeasurement = "kg",
                            Weight = 2.0
                        });
                });

            modelBuilder.Entity("CupcakeShop.Core.Entities.Cart", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AdditionDecorationId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("AdditionSubspeciesId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("AdditionWeightId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AdditionDecorationId");

                    b.HasIndex("AdditionSubspeciesId");

                    b.HasIndex("AdditionWeightId");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("CupcakeShop.Core.Entities.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Apartment")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Building")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("CartId")
                        .HasColumnType("uuid");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Commentary")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Date")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DeliveryMethod")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Entrance")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Floor")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("House")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("CupcakeShop.Core.Entities.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Delivery")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ImgUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ImgUrlsJson")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsBestseller")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("Price")
                        .HasColumnType("double precision");

                    b.Property<int>("ProductTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("ShortDetailsJson")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("StorageConditions")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UnitOfMeasurement")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("Weight")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("ProductTypeId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e3a3e259-f800-44e9-9fd2-8783d89aed41"),
                            Delivery = "Lorem, ipsum dolor sit amet consectetur adipisicing elit. Est quos quasi in dolorem reiciendis,",
                            Description = "quibusdam praesentium nemo commodi! Provident dicta pariatur",
                            ImgUrl = "/images/cake.png",
                            ImgUrlsJson = "[\"/images/cake.png\",\"/images/test1.png\", \"/images/test2.png\", \"/images/test3.png\", \"/images/test4.png\"]",
                            IsBestseller = true,
                            Name = "Chocolate cake",
                            Price = 2.0,
                            ProductTypeId = 1,
                            ShortDetailsJson = "[\"Lorem ipsum dolor sit amet\", \"consectetaur adipisicing elit\", \"sed do eiusmod tempor incididunt\", \"ut labore et dolore magna aliqua\"]",
                            StorageConditions = "unde sit modi possimus incidunt ab neque sunt fugit.",
                            UnitOfMeasurement = "kg",
                            Weight = 1.0
                        },
                        new
                        {
                            Id = new Guid("4875f480-4cee-415b-b2c6-3827a97555d3"),
                            Delivery = "Lorem, ipsum dolor sit amet consectetur adipisicing elit. Est quos quasi in dolorem reiciendis,",
                            Description = "quibusdam praesentium nemo commodi! Provident dicta pariatur",
                            ImgUrl = "/images/cake.png",
                            ImgUrlsJson = "[\"/images/cake.png\",\"/images/test1.png\", \"/images/test2.png\", \"/images/test3.png\", \"/images/test4.png\"]",
                            IsBestseller = false,
                            Name = "Apple pie",
                            Price = 3.0,
                            ProductTypeId = 1,
                            ShortDetailsJson = "[\"Lorem ipsum dolor sit amet\", \"consectetaur adipisicing elit\", \"sed do eiusmod tempor incididunt\", \"ut labore et dolore magna aliqua\"]",
                            StorageConditions = "unde sit modi possimus incidunt ab neque sunt fugit.",
                            UnitOfMeasurement = "kg",
                            Weight = 2.0
                        },
                        new
                        {
                            Id = new Guid("571ee700-828e-45bc-b9eb-f67211e5c7ff"),
                            Delivery = "Lorem, ipsum dolor sit amet consectetur adipisicing elit. Est quos quasi in dolorem reiciendis,",
                            Description = "quibusdam praesentium nemo commodi! Provident dicta pariatur",
                            ImgUrl = "/images/cookie.png",
                            ImgUrlsJson = "[\"/images/cookie.png\",\"/images/test1.png\", \"/images/test2.png\", \"/images/test3.png\", \"/images/test4.png\"]",
                            IsBestseller = true,
                            Name = "Chocolate Chip",
                            Price = 1.0,
                            ProductTypeId = 2,
                            ShortDetailsJson = "[\"Lorem ipsum dolor sit amet\", \"consectetaur adipisicing elit\", \"sed do eiusmod tempor incididunt\", \"ut labore et dolore magna aliqua\"]",
                            StorageConditions = "unde sit modi possimus incidunt ab neque sunt fugit.",
                            UnitOfMeasurement = "g",
                            Weight = 100.0
                        },
                        new
                        {
                            Id = new Guid("5d7b863e-e182-4585-bd5e-f02811bc6cca"),
                            Delivery = "Lorem, ipsum dolor sit amet consectetur adipisicing elit. Est quos quasi in dolorem reiciendis,",
                            Description = "quibusdam praesentium nemo commodi! Provident dicta pariatur",
                            ImgUrl = "/images/cookie.png",
                            ImgUrlsJson = "[\"/images/cookie.png\",\"/images/test1.png\", \"/images/test2.png\", \"/images/test3.png\", \"/images/test4.png\"]",
                            IsBestseller = false,
                            Name = "Peanut Butter",
                            Price = 5.0,
                            ProductTypeId = 2,
                            ShortDetailsJson = "[\"Lorem ipsum dolor sit amet\", \"consectetaur adipisicing elit\", \"sed do eiusmod tempor incididunt\", \"ut labore et dolore magna aliqua\"]",
                            StorageConditions = "unde sit modi possimus incidunt ab neque sunt fugit.",
                            UnitOfMeasurement = "g",
                            Weight = 500.0
                        },
                        new
                        {
                            Id = new Guid("2a97e352-03cc-41c9-8445-f3331f214c5d"),
                            Delivery = "Lorem, ipsum dolor sit amet consectetur adipisicing elit. Est quos quasi in dolorem reiciendis,",
                            Description = "quibusdam praesentium nemo commodi! Provident dicta pariatur",
                            ImgUrl = "/images/choux.png",
                            ImgUrlsJson = "[\"/images/choux.png\",\"/images/test1.png\", \"/images/test2.png\", \"/images/test3.png\", \"/images/test4.png\"]",
                            IsBestseller = true,
                            Name = "Lemon Choux",
                            Price = 1.0,
                            ProductTypeId = 3,
                            ShortDetailsJson = "[\"Lorem ipsum dolor sit amet\", \"consectetaur adipisicing elit\", \"sed do eiusmod tempor incididunt\", \"ut labore et dolore magna aliqua\"]",
                            StorageConditions = "unde sit modi possimus incidunt ab neque sunt fugit.",
                            UnitOfMeasurement = "g",
                            Weight = 100.0
                        },
                        new
                        {
                            Id = new Guid("42ccdbf6-b837-4d33-8a2f-794c25b85ed6"),
                            Delivery = "Lorem, ipsum dolor sit amet consectetur adipisicing elit. Est quos quasi in dolorem reiciendis,",
                            Description = "quibusdam praesentium nemo commodi! Provident dicta pariatur",
                            ImgUrl = "/images/choux.png",
                            ImgUrlsJson = "[\"/images/choux.png\",\"/images/test1.png\", \"/images/test2.png\", \"/images/test3.png\", \"/images/test4.png\"]",
                            IsBestseller = false,
                            Name = "Strawberry Choux",
                            Price = 4.0,
                            ProductTypeId = 3,
                            ShortDetailsJson = "[\"Lorem ipsum dolor sit amet\", \"consectetaur adipisicing elit\", \"sed do eiusmod tempor incididunt\", \"ut labore et dolore magna aliqua\"]",
                            StorageConditions = "unde sit modi possimus incidunt ab neque sunt fugit.",
                            UnitOfMeasurement = "g",
                            Weight = 400.0
                        },
                        new
                        {
                            Id = new Guid("1c2740a8-461a-42dc-8bbb-854fe3d7c5d5"),
                            Delivery = "Lorem, ipsum dolor sit amet consectetur adipisicing elit. Est quos quasi in dolorem reiciendis,",
                            Description = "quibusdam praesentium nemo commodi! Provident dicta pariatur",
                            ImgUrl = "/images/pizza.jpg",
                            ImgUrlsJson = "[\"/images/pizza.jpg\",\"/images/test1.png\", \"/images/test2.png\", \"/images/test3.png\", \"/images/test4.png\"]",
                            IsBestseller = true,
                            Name = "Four Cheese",
                            Price = 5.0,
                            ProductTypeId = 4,
                            ShortDetailsJson = "[\"Lorem ipsum dolor sit amet\", \"consectetaur adipisicing elit\", \"sed do eiusmod tempor incididunt\", \"ut labore et dolore magna aliqua\"]",
                            StorageConditions = "unde sit modi possimus incidunt ab neque sunt fugit.",
                            UnitOfMeasurement = "g",
                            Weight = 500.0
                        },
                        new
                        {
                            Id = new Guid("0a8fb0ee-a3fa-4c3b-93a5-6bf05978df3d"),
                            Delivery = "Lorem, ipsum dolor sit amet consectetur adipisicing elit. Est quos quasi in dolorem reiciendis,",
                            Description = "quibusdam praesentium nemo commodi! Provident dicta pariatur",
                            ImgUrl = "/images/pizza.jpg",
                            ImgUrlsJson = "[\"/images/pizza.jpg\",\"/images/test1.png\", \"/images/test2.png\", \"/images/test3.png\", \"/images/test4.png\"]",
                            IsBestseller = false,
                            Name = "Veggie",
                            Price = 3.0,
                            ProductTypeId = 4,
                            ShortDetailsJson = "[\"Lorem ipsum dolor sit amet\", \"consectetaur adipisicing elit\", \"sed do eiusmod tempor incididunt\", \"ut labore et dolore magna aliqua\"]",
                            StorageConditions = "unde sit modi possimus incidunt ab neque sunt fugit.",
                            UnitOfMeasurement = "g",
                            Weight = 300.0
                        });
                });

            modelBuilder.Entity("CupcakeShop.Core.Entities.ProductType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ProductTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "cake"
                        },
                        new
                        {
                            Id = 2,
                            Name = "cookie"
                        },
                        new
                        {
                            Id = 3,
                            Name = "choux"
                        },
                        new
                        {
                            Id = 4,
                            Name = "pizza"
                        });
                });

            modelBuilder.Entity("CartProduct", b =>
                {
                    b.HasOne("CupcakeShop.Core.Entities.Cart", null)
                        .WithMany()
                        .HasForeignKey("CartsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CupcakeShop.Core.Entities.Product", null)
                        .WithMany()
                        .HasForeignKey("ProductsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CupcakeShop.Core.Entities.Cart", b =>
                {
                    b.HasOne("CupcakeShop.Core.Entities.AdditionDecoration", "AdditionDecoration")
                        .WithMany()
                        .HasForeignKey("AdditionDecorationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CupcakeShop.Core.Entities.AdditionSubspecies", "AdditionSubspecies")
                        .WithMany()
                        .HasForeignKey("AdditionSubspeciesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CupcakeShop.Core.Entities.AdditionWeight", "AdditionWeight")
                        .WithMany()
                        .HasForeignKey("AdditionWeightId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AdditionDecoration");

                    b.Navigation("AdditionSubspecies");

                    b.Navigation("AdditionWeight");
                });

            modelBuilder.Entity("CupcakeShop.Core.Entities.Order", b =>
                {
                    b.HasOne("CupcakeShop.Core.Entities.Cart", "Cart")
                        .WithMany()
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cart");
                });

            modelBuilder.Entity("CupcakeShop.Core.Entities.Product", b =>
                {
                    b.HasOne("CupcakeShop.Core.Entities.ProductType", "ProductType")
                        .WithMany()
                        .HasForeignKey("ProductTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductType");
                });
#pragma warning restore 612, 618
        }
    }
}
