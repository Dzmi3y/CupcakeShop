// <auto-generated />
using System;
using CupcakeShop.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CupcakeShop.Database.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CartProduct", b =>
                {
                    b.Property<Guid>("CartsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProductsId")
                        .HasColumnType("uuid");

                    b.HasKey("CartsId", "ProductsId");

                    b.HasIndex("ProductsId");

                    b.ToTable("CartProduct");
                });

            modelBuilder.Entity("CupcakeShop.Core.Entities.AdditionDecoration", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("Price")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.ToTable("AdditionDecorations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("73b2ddf7-e893-4459-81be-4840dc3e595b"),
                            Name = "Without decoration",
                            Price = 0.0
                        },
                        new
                        {
                            Id = new Guid("77372acc-0194-4921-9594-b01787fdbd51"),
                            Name = "Decor 1",
                            Price = 1.0
                        },
                        new
                        {
                            Id = new Guid("fbf6138a-b184-4929-bd18-dd1542a88261"),
                            Name = "Decor 2",
                            Price = 2.0
                        },
                        new
                        {
                            Id = new Guid("6ee29878-b244-4c95-8636-b6bd67efe7fe"),
                            Name = "Decor 3",
                            Price = 3.0
                        });
                });

            modelBuilder.Entity("CupcakeShop.Core.Entities.AdditionSubspecies", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("Price")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.ToTable("AdditionSubspecies");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1b153fb3-cc43-4c68-9a13-b763fa4dec6d"),
                            Name = "Default type",
                            Price = 0.0
                        },
                        new
                        {
                            Id = new Guid("789aeb12-8932-4cd3-a052-32b23708ef66"),
                            Name = "Type 1",
                            Price = 1.0
                        },
                        new
                        {
                            Id = new Guid("0b808798-06fe-41d0-9162-6a01c612242a"),
                            Name = "Type 2",
                            Price = 2.0
                        },
                        new
                        {
                            Id = new Guid("6709f6c1-8773-4533-83a8-bd37de4cdd84"),
                            Name = "Type 3",
                            Price = 3.0
                        });
                });

            modelBuilder.Entity("CupcakeShop.Core.Entities.AdditionWeight", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<double>("Price")
                        .HasColumnType("double precision");

                    b.Property<string>("UnitOfMeasurement")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("Weight")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.ToTable("AdditionWeights");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b9fbb819-d8de-443c-b6a6-ba76e0216eee"),
                            Price = 0.0,
                            UnitOfMeasurement = "g",
                            Weight = 0.0
                        },
                        new
                        {
                            Id = new Guid("95322093-4a58-4cfe-9024-fc388daaa85a"),
                            Price = 1.0,
                            UnitOfMeasurement = "g",
                            Weight = 100.0
                        },
                        new
                        {
                            Id = new Guid("94a6db5b-7d50-492c-8cfe-7c185d56af47"),
                            Price = 2.0,
                            UnitOfMeasurement = "g",
                            Weight = 300.0
                        },
                        new
                        {
                            Id = new Guid("deb339ec-5642-4db6-9aa3-2420288db67d"),
                            Price = 3.0,
                            UnitOfMeasurement = "g",
                            Weight = 500.0
                        },
                        new
                        {
                            Id = new Guid("c01d3f80-5c5d-4af0-8c70-93754c52eab5"),
                            Price = 4.0,
                            UnitOfMeasurement = "kg",
                            Weight = 1.0
                        },
                        new
                        {
                            Id = new Guid("9fd997e9-e434-4c21-b5b4-1eb440b35ae7"),
                            Price = 5.0,
                            UnitOfMeasurement = "kg",
                            Weight = 1.5
                        },
                        new
                        {
                            Id = new Guid("c13baddf-6c73-47c2-907b-397c0c9b0267"),
                            Price = 6.0,
                            UnitOfMeasurement = "kg",
                            Weight = 2.0
                        });
                });

            modelBuilder.Entity("CupcakeShop.Core.Entities.Cart", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AdditionDecorationId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("AdditionSubspeciesId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("AdditionWeightId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AdditionDecorationId");

                    b.HasIndex("AdditionSubspeciesId");

                    b.HasIndex("AdditionWeightId");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("CupcakeShop.Core.Entities.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Apartment")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Building")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("CartId")
                        .HasColumnType("uuid");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Commentary")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Date")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DeliveryMethod")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Entrance")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Floor")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("House")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("CupcakeShop.Core.Entities.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Delivery")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ImgUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ImgUrlsJson")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsBestseller")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("Price")
                        .HasColumnType("double precision");

                    b.Property<Guid>("ProductTypeId")
                        .HasColumnType("uuid");

                    b.Property<string>("ShortDetailsJson")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("StorageConditions")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UnitOfMeasurement")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("Weight")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("ProductTypeId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f3c3e245-4b49-43d8-aafb-6369980af9fc"),
                            Delivery = "Lorem, ipsum dolor sit amet consectetur adipisicing elit. Est quos quasi in dolorem reiciendis,",
                            Description = "quibusdam praesentium nemo commodi! Provident dicta pariatur",
                            ImgUrl = "/images/cake.png",
                            ImgUrlsJson = "[\"/images/cake.png\",\"/images/test1.png\", \"/images/test2.png\", \"/images/test3.png\", \"/images/test4.png\"]",
                            IsBestseller = true,
                            Name = "Chocolate cake",
                            Price = 2.0,
                            ProductTypeId = new Guid("45408256-b28f-41e2-895a-7b5623360e85"),
                            ShortDetailsJson = "[\"Lorem ipsum dolor sit amet\", \"consectetaur adipisicing elit\", \"sed do eiusmod tempor incididunt\", \"ut labore et dolore magna aliqua\"]",
                            StorageConditions = "unde sit modi possimus incidunt ab neque sunt fugit.",
                            UnitOfMeasurement = "kg",
                            Weight = 1.0
                        },
                        new
                        {
                            Id = new Guid("f5a2422d-7cf5-458d-9b60-f9fbfd06624e"),
                            Delivery = "Lorem, ipsum dolor sit amet consectetur adipisicing elit. Est quos quasi in dolorem reiciendis,",
                            Description = "quibusdam praesentium nemo commodi! Provident dicta pariatur",
                            ImgUrl = "/images/cake.png",
                            ImgUrlsJson = "[\"/images/cake.png\",\"/images/test1.png\", \"/images/test2.png\", \"/images/test3.png\", \"/images/test4.png\"]",
                            IsBestseller = false,
                            Name = "Apple pie",
                            Price = 3.0,
                            ProductTypeId = new Guid("45408256-b28f-41e2-895a-7b5623360e85"),
                            ShortDetailsJson = "[\"Lorem ipsum dolor sit amet\", \"consectetaur adipisicing elit\", \"sed do eiusmod tempor incididunt\", \"ut labore et dolore magna aliqua\"]",
                            StorageConditions = "unde sit modi possimus incidunt ab neque sunt fugit.",
                            UnitOfMeasurement = "kg",
                            Weight = 2.0
                        },
                        new
                        {
                            Id = new Guid("3ead1c7f-172f-4479-9f73-be992b963ffd"),
                            Delivery = "Lorem, ipsum dolor sit amet consectetur adipisicing elit. Est quos quasi in dolorem reiciendis,",
                            Description = "quibusdam praesentium nemo commodi! Provident dicta pariatur",
                            ImgUrl = "/images/cookie.png",
                            ImgUrlsJson = "[\"/images/cookie.png\",\"/images/test1.png\", \"/images/test2.png\", \"/images/test3.png\", \"/images/test4.png\"]",
                            IsBestseller = true,
                            Name = "Chocolate Chip",
                            Price = 1.0,
                            ProductTypeId = new Guid("67c19964-f980-4b79-9f84-ed5981f9203b"),
                            ShortDetailsJson = "[\"Lorem ipsum dolor sit amet\", \"consectetaur adipisicing elit\", \"sed do eiusmod tempor incididunt\", \"ut labore et dolore magna aliqua\"]",
                            StorageConditions = "unde sit modi possimus incidunt ab neque sunt fugit.",
                            UnitOfMeasurement = "g",
                            Weight = 100.0
                        },
                        new
                        {
                            Id = new Guid("bf199811-19f3-425f-977c-52a9cdf472f2"),
                            Delivery = "Lorem, ipsum dolor sit amet consectetur adipisicing elit. Est quos quasi in dolorem reiciendis,",
                            Description = "quibusdam praesentium nemo commodi! Provident dicta pariatur",
                            ImgUrl = "/images/cookie.png",
                            ImgUrlsJson = "[\"/images/cookie.png\",\"/images/test1.png\", \"/images/test2.png\", \"/images/test3.png\", \"/images/test4.png\"]",
                            IsBestseller = false,
                            Name = "Peanut Butter",
                            Price = 5.0,
                            ProductTypeId = new Guid("67c19964-f980-4b79-9f84-ed5981f9203b"),
                            ShortDetailsJson = "[\"Lorem ipsum dolor sit amet\", \"consectetaur adipisicing elit\", \"sed do eiusmod tempor incididunt\", \"ut labore et dolore magna aliqua\"]",
                            StorageConditions = "unde sit modi possimus incidunt ab neque sunt fugit.",
                            UnitOfMeasurement = "g",
                            Weight = 500.0
                        },
                        new
                        {
                            Id = new Guid("89d2f900-3f2c-414b-b89e-37d5a497be8c"),
                            Delivery = "Lorem, ipsum dolor sit amet consectetur adipisicing elit. Est quos quasi in dolorem reiciendis,",
                            Description = "quibusdam praesentium nemo commodi! Provident dicta pariatur",
                            ImgUrl = "/images/choux.png",
                            ImgUrlsJson = "[\"/images/choux.png\",\"/images/test1.png\", \"/images/test2.png\", \"/images/test3.png\", \"/images/test4.png\"]",
                            IsBestseller = true,
                            Name = "Lemon Choux",
                            Price = 1.0,
                            ProductTypeId = new Guid("377644e5-7b93-4ff9-b0c2-e9bff580ced4"),
                            ShortDetailsJson = "[\"Lorem ipsum dolor sit amet\", \"consectetaur adipisicing elit\", \"sed do eiusmod tempor incididunt\", \"ut labore et dolore magna aliqua\"]",
                            StorageConditions = "unde sit modi possimus incidunt ab neque sunt fugit.",
                            UnitOfMeasurement = "g",
                            Weight = 100.0
                        },
                        new
                        {
                            Id = new Guid("b8550731-b514-49a1-a1ec-dd893ddaf605"),
                            Delivery = "Lorem, ipsum dolor sit amet consectetur adipisicing elit. Est quos quasi in dolorem reiciendis,",
                            Description = "quibusdam praesentium nemo commodi! Provident dicta pariatur",
                            ImgUrl = "/images/choux.png",
                            ImgUrlsJson = "[\"/images/choux.png\",\"/images/test1.png\", \"/images/test2.png\", \"/images/test3.png\", \"/images/test4.png\"]",
                            IsBestseller = false,
                            Name = "Strawberry Choux",
                            Price = 4.0,
                            ProductTypeId = new Guid("377644e5-7b93-4ff9-b0c2-e9bff580ced4"),
                            ShortDetailsJson = "[\"Lorem ipsum dolor sit amet\", \"consectetaur adipisicing elit\", \"sed do eiusmod tempor incididunt\", \"ut labore et dolore magna aliqua\"]",
                            StorageConditions = "unde sit modi possimus incidunt ab neque sunt fugit.",
                            UnitOfMeasurement = "g",
                            Weight = 400.0
                        },
                        new
                        {
                            Id = new Guid("15ed97c4-460b-48c8-8728-489cc7e1513b"),
                            Delivery = "Lorem, ipsum dolor sit amet consectetur adipisicing elit. Est quos quasi in dolorem reiciendis,",
                            Description = "quibusdam praesentium nemo commodi! Provident dicta pariatur",
                            ImgUrl = "/images/pizza.jpg",
                            ImgUrlsJson = "[\"/images/pizza.jpg\",\"/images/test1.png\", \"/images/test2.png\", \"/images/test3.png\", \"/images/test4.png\"]",
                            IsBestseller = true,
                            Name = "Four Cheese",
                            Price = 5.0,
                            ProductTypeId = new Guid("b0d05d03-e2b6-4b89-8155-68e99e2371ee"),
                            ShortDetailsJson = "[\"Lorem ipsum dolor sit amet\", \"consectetaur adipisicing elit\", \"sed do eiusmod tempor incididunt\", \"ut labore et dolore magna aliqua\"]",
                            StorageConditions = "unde sit modi possimus incidunt ab neque sunt fugit.",
                            UnitOfMeasurement = "g",
                            Weight = 500.0
                        },
                        new
                        {
                            Id = new Guid("68077407-5463-4cbb-aed2-b581a73fe27b"),
                            Delivery = "Lorem, ipsum dolor sit amet consectetur adipisicing elit. Est quos quasi in dolorem reiciendis,",
                            Description = "quibusdam praesentium nemo commodi! Provident dicta pariatur",
                            ImgUrl = "/images/pizza.jpg",
                            ImgUrlsJson = "[\"/images/pizza.jpg\",\"/images/test1.png\", \"/images/test2.png\", \"/images/test3.png\", \"/images/test4.png\"]",
                            IsBestseller = false,
                            Name = "Veggie",
                            Price = 3.0,
                            ProductTypeId = new Guid("b0d05d03-e2b6-4b89-8155-68e99e2371ee"),
                            ShortDetailsJson = "[\"Lorem ipsum dolor sit amet\", \"consectetaur adipisicing elit\", \"sed do eiusmod tempor incididunt\", \"ut labore et dolore magna aliqua\"]",
                            StorageConditions = "unde sit modi possimus incidunt ab neque sunt fugit.",
                            UnitOfMeasurement = "g",
                            Weight = 300.0
                        });
                });

            modelBuilder.Entity("CupcakeShop.Core.Entities.ProductType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("SequenceNumber")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("ProductTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("45408256-b28f-41e2-895a-7b5623360e85"),
                            Name = "cake",
                            SequenceNumber = 1
                        },
                        new
                        {
                            Id = new Guid("67c19964-f980-4b79-9f84-ed5981f9203b"),
                            Name = "cookie",
                            SequenceNumber = 2
                        },
                        new
                        {
                            Id = new Guid("377644e5-7b93-4ff9-b0c2-e9bff580ced4"),
                            Name = "choux",
                            SequenceNumber = 3
                        },
                        new
                        {
                            Id = new Guid("b0d05d03-e2b6-4b89-8155-68e99e2371ee"),
                            Name = "pizza",
                            SequenceNumber = 4
                        });
                });

            modelBuilder.Entity("CartProduct", b =>
                {
                    b.HasOne("CupcakeShop.Core.Entities.Cart", null)
                        .WithMany()
                        .HasForeignKey("CartsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CupcakeShop.Core.Entities.Product", null)
                        .WithMany()
                        .HasForeignKey("ProductsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CupcakeShop.Core.Entities.Cart", b =>
                {
                    b.HasOne("CupcakeShop.Core.Entities.AdditionDecoration", "AdditionDecoration")
                        .WithMany()
                        .HasForeignKey("AdditionDecorationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CupcakeShop.Core.Entities.AdditionSubspecies", "AdditionSubspecies")
                        .WithMany()
                        .HasForeignKey("AdditionSubspeciesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CupcakeShop.Core.Entities.AdditionWeight", "AdditionWeight")
                        .WithMany()
                        .HasForeignKey("AdditionWeightId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AdditionDecoration");

                    b.Navigation("AdditionSubspecies");

                    b.Navigation("AdditionWeight");
                });

            modelBuilder.Entity("CupcakeShop.Core.Entities.Order", b =>
                {
                    b.HasOne("CupcakeShop.Core.Entities.Cart", "Cart")
                        .WithMany()
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cart");
                });

            modelBuilder.Entity("CupcakeShop.Core.Entities.Product", b =>
                {
                    b.HasOne("CupcakeShop.Core.Entities.ProductType", "ProductType")
                        .WithMany()
                        .HasForeignKey("ProductTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductType");
                });
#pragma warning restore 612, 618
        }
    }
}
